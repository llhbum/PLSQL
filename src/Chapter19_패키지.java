public class Chapter19_패키지 {
    /*
    Chapter19_패키지
        [개념]
            - 다양한 PL/SQL 요소들을 묶어 모듈화하여 하나의 프로그램 레벨로 제공할 수 있게 한다.
              저장 함수나 저장 프로시저와 마찬가지로 패키지도 고유한 이름을 가지고, DB에 저장되며, 이름을 식별자로 사용하여 반복적으로 재사용될 수 있다.
              패키지는 내부에 타입, 상수, 변수, 커서, 예외, 서브프로그램(함수, 프로시저) 등 PL/SQL에서 지원하는 대부분의 요소들을 포함할 수 있으며,
              패키지의 사용자가 이들을 참조할수 있도록 한다.

    19.1 패키지 구조
        - 패키지는 패키지 명세와 패키지 본체로 나뉘어서 작성된다.
          패키지 명세는 패키지 사용자에게 공개되는 타입, 상수, 변수, 커서, 예외, 서브프로그램 등 을 선언하는 오브젝트로 반드시 작성되어야한다.

        [패키지 명세 구조]
            - 공용 서브프로그램 선언 부분은 프로그램의 프로토타입만을 선언한다.
              패키지 명세는 서브프로그램의 정의(서브프로그램의 실행부)를 가질 수 없다.
              서브 프로그램은 패키지 본체에서만 정의할 수 있다.
              * 마지막이 END로 끝나지만 BEGIN은 없음

              CREATE OR REPLACE PACKAGE 패키지명
              IS -- IS 대신 AS를 사용해도 무방
                -- 패키지 명세에는 아래와 같은 공용(public) 항목들이 선언될 수 있다.
                -- 항목들의 순서는 관계가 없으며 서로 섞여도 무관한다.

                공용 타입 선언

                공용 상수 선언

                공용 변수 선언

                공용 커서 선언

                공용 예외 선언

                공용 서브프로그램 선언

            END;

        [패키지 본체 구조]
            - 패키지 본체는 패키지 명세에서 선언만 하고 실체를 정의하지 않은 서브프로그램과 커서를 실제로 정의한다.
              그리고 패키지의 외부에 노출시키지 않고 내부적으로만 사용할 목적(private)의 타입, 상수, 변수, 커서, 예외, 서브프로그램을 추가적으로 선언하고 정의할 수 있다.
              즉, 패키지 명세는 필수고, 본체는 선택이다.
              패키지 본체는 지켜야 하는 배치 순서가 있다.
              서브프로그램 정의가 패키지 본체 선언부의 마지막에 놓여야 한다. -> 순서가 지켜지지 않으면 컴파일 오류가 난다.

              CREATE OR REPLACE PACKAGE BODY 패키지명
              IS -- IS 대신 AS를 사용해도 동일함
              -- 패키지 본체 선언부 --
              -- 패키지 본체에는 내부적으로 사용할 아래와 같은 전용 항목들의 선언과 공용 커서의 정의부가 나타난다.
              -- 다음 일곱 가지 유형의 항목들의 순서는 관계가 없으며 서로 섞여도 무관하다.

              전용 타입 선언

              전용 변수 선언

              전용 커서 선언 및 정의

              전용 예외 선언

              전용 서브프로그램 선언

              공용 커서 정의

              -- 서브프로그램 정의는 패키지 초기화부 바로 위에 나타나야 한다.
              -- 전용 서브프로그램과 공용 서브프로그램 정의의 순서는 상관없다.

              전용 서브프로그램 정의

              공용 서브프로그램 정의

              -- 패키지 본체의 마지막에는 패키지 인스턴스가 생성될(처음 참조될 때) 실행되며 패키지 변수를 초기화 할수 있는 패키지 초기화가 나타날 수 있다.

              BEGIN
                 패키지 초기화부
              END;

              * 패키지 본체에 나타나는 모든 항목은 필수가 아니라 옵션이다.
                따라서 필요한 경우에만 선언하고 정의하면 된다.
                특이한 부분 하나는 패키지초기화인데 이것은 패키지가 초기화될 때(패키지가 메모리에 로드되고 인스턴스가 생성될 때) 단 한 번만 실행된다.

    * 19.2 패키지 변수
        - 패키지 변수는 패키지 명세 또는 패키지 본체에 선언되는 변수를 말한다.(패키지 서브프로그램 내부에서 사용하는 변수는 여기에 해당하지 않는다.)
            [종류]
            - 공용 패키지 변수 : 패키지 명세, 외부PL/SQL에서 참조가능, 외부SQL에서 참조 불가능, 내부 서브프로그램에서 참조 가능
            - 전용 패키지 변수 : 패키지 본체, 외부PL/SQL에서 불가능, 외부SQL에서 참조 불가능, 내부 서브프로그램에서 참조 가능

            * 패키지변수는 패키지가 초기화 될 때 생성되고, 패키지가 제거될 때 같이 제거된다.
              즉, 패키지 변수의 생명 주기는 패키지의 생명 주기와 동일하다는 것이다.
              패키지는 세션에서 패키지가 최초로 참조될 때 초기화된다.
      [초기화]
        [종류]
            - 1. 패키지 변수 선언 시 바로 초깃값을 부여하는 방법
            - 2. 패키지 초기화부에서 초깃값을 부여하는 방법

    19.3 패키지 서브프로그램
        [개념]
            - 패키지 서브프로그램은 패키지 내부에 선언된 함수와 프로시저를 말한다.

        [종류]
            - 1. 공용 서브프로그램 : 패키지명세, 외부 pl/sql 참조 가능, 외부 sql 참조 프로시저 불가 - 함수가능, 내부 서브프로그램 참조 가능, 주사용자 외부 프로그램
            - 2. 전용 서브프로그램 : 패키지본체, 외부 pl/sql 참조 불가능, 외부 sql 불가능, 내부 서브프로그램 참조 가능, 공용 또는 전용 서브프로그램

    * 19.4 패키지 커서
        [개념]
            - 패키지 명세에 커서를 선언할 수 있는데 일반적으로 명세에 커서를 선언하고 본체에 실제 커서를 정의한다.
              커서의 선언과 정의를 분리함으로써 커서 명세의 변경 없이 커서 정의를 변경할 수 있는 장점이 생긴다.
              커서를 선언만 하고 정의를 패키지 본체로 미룰 떄에는 return 키워드를 사용하여 커서의 반환타입을 지정해 주어야 한다.

    * 19.5 SERIALLY_REUSABLE 패키지
        [개념]
            - 세션별로 사용되는 UGA가 아니라 공유 메모리인 SGA의 풀에 생성된다.
              SERIALLY_REUSABLE 패키지가 사용될 때는 이 풀에서 패키지를 할당받아 실행하고, 실행이 끝나면 이 풀로 되돌려진다.

        [장점]
            - 세션별로 패키지를 위한 메모리가 할당되지 않으므로 총 메모리 사용량이 적다는 것이다.

        [제약사항]
            - 데이터베이스 트리거에는 SERIALLY_REUSABLE 패키지를 사용할 수 없다.
            - SQL문에서 호출되는 서브함수를 가진 패키지는 SERIALLY_REUSABLE 속성을 사용할 수 없다.
     */
}
